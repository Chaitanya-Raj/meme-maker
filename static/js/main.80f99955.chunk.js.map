{"version":3,"sources":["components/Meme.js","App.js","index.js"],"names":["Meme","meme","handleClick","solo","classname","className","src","url","alt","onClick","name","App","useState","templates","SetTemplates","template","setTemplate","text0","setText0","text1","setText1","setMeme","useEffect","Axios","get","crossDomain","then","response","data","memes","handleSubmit","event","a","preventDefault","params","template_id","id","username","process","password","post","console","log","success","goBackHome","key","onSubmit","type","value","onChange","e","target","filter","box_count","map","templateView","ReactDOM","render","document","getElementById"],"mappings":"wRAaeA,EAXF,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,YAAgC,IAAnBC,KAC7BC,OADgD,SAC7B,iBAAmB,OAE1C,OACE,yBAAKC,UAAWD,GACd,yBAAKE,IAAKL,EAAKM,IAAKC,IAAI,OAAOC,QAASP,IACxC,2BAAID,EAAKS,Q,YC+FAC,MAjGf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,mBAAS,MAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,OAIaN,mBAAS,IAJtB,mBAINO,EAJM,KAICC,EAJD,OAKWR,mBAAS,MALpB,mBAKNX,EALM,KAKAoB,EALA,KAObC,qBAAU,WACRC,IAAMC,IAAI,oCAAqC,CAAEC,aAAa,IAAQC,MACpE,SAACC,GACCb,EAAaa,EAASC,KAAKA,KAAKC,YAGnC,IAEH,IAsBMC,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACnBD,EAAME,iBACFC,EAAS,CACXC,YAAapB,EAASqB,GACtBC,SAAUC,YACVC,SAAUD,WACVrB,MAAOA,EACPE,MAAOA,GAPU,SASII,IAAMiB,KAAN,4DACgCN,EAAOC,YADvC,qBAC+DD,EAAOG,SADtE,qBAC2FH,EAAOK,SADlG,kBACoHL,EAAOjB,MAD3H,kBAC0IiB,EAAOf,QAVrJ,OASbQ,EATa,OAYnBc,QAAQC,IAAIf,IACkB,IAA1BA,EAASC,KAAKe,SAAkBtB,EAAQM,EAASC,KAAKA,KAAKrB,KAb5C,2CAAH,sDAgBZqC,EAAa,WACjB5B,EAAY,MACZK,EAAQ,MACRH,EAAS,IACTE,EAAS,KAGX,OAAInB,EAEA,yBAAKI,UAAU,4BACb,yBAAKC,IAAKL,EAAMO,IAAI,OAAO4B,GAAG,eAC9B,4BAAQ3B,QAASmC,GAAjB,sBAKF7B,EAEA,yBAAKV,UAAU,4BArCV,kBAAC,EAAD,CAAMwC,IAAK9B,EAASqB,GAAInC,KAAMc,EAAUZ,KAAK,SAuChD,0BAAM2C,SAAUhB,GACd,2BACEiB,KAAK,OACLC,MAAO/B,EACPgC,SAAU,SAACC,GACThC,EAASgC,EAAEC,OAAOH,UAGtB,2BACED,KAAK,OACLC,MAAO7B,EACP8B,SAAU,SAACC,GACT9B,EAAS8B,EAAEC,OAAOH,UAGtB,4BAAQD,KAAK,UAAb,WAEF,4BAAQtC,QAASmC,GAAjB,WAIC,yBAAKvC,UAAU,aA/ED,WACnB,GAAIQ,EAKF,OAJ0BA,EAAUuC,QAClC,SAACrC,GAAD,OAAqC,IAAvBA,EAASsC,aAGAC,KAAI,SAACvC,GAAD,OAC3B,kBAAC,EAAD,CACE8B,IAAK9B,EAASqB,GACdnC,KAAMc,EACNb,YAAa,WACXc,EAAYD,SAoEawC,KChGrCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.80f99955.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Meme = ({ meme, handleClick, solo = false }) => {\r\n  let classname = solo ? \"meme solo-meme\" : \"meme\";\r\n\r\n  return (\r\n    <div className={classname}>\r\n      <img src={meme.url} alt=\"meme\" onClick={handleClick} />\r\n      <p>{meme.name}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Meme;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport Meme from \"./components/Meme\";\r\nimport \"./reset.css\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [templates, SetTemplates] = useState([]);\r\n  const [template, setTemplate] = useState(null);\r\n  const [text0, setText0] = useState(\"\");\r\n  const [text1, setText1] = useState(\"\");\r\n  const [meme, setMeme] = useState(null);\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"https://api.imgflip.com/get_memes\", { crossDomain: true }).then(\r\n      (response) => {\r\n        SetTemplates(response.data.data.memes);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const templateView = () => {\r\n    if (templates) {\r\n      const filteredTemplates = templates.filter(\r\n        (template) => template.box_count === 2\r\n      );\r\n\r\n      return filteredTemplates.map((template) => (\r\n        <Meme\r\n          key={template.id}\r\n          meme={template}\r\n          handleClick={() => {\r\n            setTemplate(template);\r\n          }}\r\n        />\r\n      ));\r\n    }\r\n  };\r\n\r\n  const createView = () => {\r\n    return <Meme key={template.id} meme={template} solo=\"true\" />;\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let params = {\r\n      template_id: template.id,\r\n      username: process.env.REACT_APP_USERNAME,\r\n      password: process.env.REACT_APP_PASSWORD,\r\n      text0: text0,\r\n      text1: text1,\r\n    };\r\n    const response = await Axios.post(\r\n      `https://api.imgflip.com/caption_image?template_id=${params.template_id}&username=${params.username}&password=${params.password}&text0=${params.text0}&text1=${params.text1}`\r\n    );\r\n    console.log(response);\r\n    if (response.data.success === true) setMeme(response.data.data.url);\r\n  };\r\n\r\n  const goBackHome = () => {\r\n    setTemplate(null);\r\n    setMeme(null);\r\n    setText0(\"\");\r\n    setText1(\"\");\r\n  };\r\n\r\n  if (meme) {\r\n    return (\r\n      <div className=\"container solo-container\">\r\n        <img src={meme} alt=\"meme\" id=\"final-meme\" />\r\n        <button onClick={goBackHome}>Make another meme</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (template) {\r\n    return (\r\n      <div className=\"container solo-container\">\r\n        {createView()}\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            value={text0}\r\n            onChange={(e) => {\r\n              setText0(e.target.value);\r\n            }}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={text1}\r\n            onChange={(e) => {\r\n              setText1(e.target.value);\r\n            }}\r\n          />\r\n          <button type=\"submit\">create</button>\r\n        </form>\r\n        <button onClick={goBackHome}>Cancel</button>\r\n      </div>\r\n    );\r\n  }\r\n  return <div className=\"container\">{templateView()}</div>;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}