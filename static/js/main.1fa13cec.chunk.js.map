{"version":3,"sources":["components/Meme.js","App.js","index.js"],"names":["Meme","meme","handleClick","solo","classname","className","src","url","alt","onClick","name","App","useState","templates","SetTemplates","template","setTemplate","texts","setTexts","setMeme","useEffect","Axios","get","crossDomain","then","response","data","memes","handleSubmit","event","a","preventDefault","params","template_id","id","username","process","password","text0","text1","post","console","log","goBackHome","key","onSubmit","type","value","onChange","e","newText","target","filter","box_count","map","templateView","ReactDOM","render","document","getElementById"],"mappings":"wRAaeA,EAXF,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,YAAgC,IAAnBC,KAC7BC,OADgD,SAC7B,iBAAmB,OAE1C,OACE,yBAAKC,UAAWD,GACd,yBAAKE,IAAKL,EAAKM,IAAKC,IAAI,OAAOC,QAASP,IACxC,2BAAID,EAAKS,Q,YCgGAC,MAlGf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,mBAAS,MAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,OAIWN,mBAAS,MAJpB,mBAINX,EAJM,KAIAkB,EAJA,KAMbC,qBAAU,WACRC,IAAMC,IAAI,oCAAqC,CAAEC,aAAa,IAAQC,MACpE,SAACC,GACCX,EAAaW,EAASC,KAAKA,KAAKC,YAGnC,IAEH,IAsBMC,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACnBD,EAAME,iBACFC,EAAS,CACXC,YAAalB,EAASmB,GACtBC,SAAUC,YACVC,SAAUD,WACVE,MAAOrB,EAAM,GACbsB,MAAOtB,EAAM,IAAM,IAPF,SASII,IAAMmB,KAAN,4DACgCR,EAAOC,YADvC,qBAC+DD,EAAOG,SADtE,qBAC2FH,EAAOK,SADlG,kBACoHL,EAAOM,MAD3H,kBAC0IN,EAAOO,QAVrJ,OASbd,EATa,OAYnBgB,QAAQC,IAAIjB,GACZN,EAAQM,EAASC,KAAKA,KAAKnB,KAbR,2CAAH,sDAgBZoC,EAAa,WACjB3B,EAAY,MACZG,EAAQ,OAGV,OAAIlB,EAEA,6BACE,yBAAKK,IAAKL,EAAMO,IAAI,SACpB,4BAAQC,QAASkC,GAAjB,sBAKF5B,EAEA,yBAAKV,UAAU,4BAnCV,kBAAC,EAAD,CAAMuC,IAAK7B,EAASmB,GAAIjC,KAAMc,EAAUZ,KAAK,SAqChD,0BAAM0C,SAAUjB,GACd,2BACEkB,KAAK,OACLC,MAAO9B,EAAM,GACb+B,SAAU,SAACC,GACT,IAAIC,EAAUjC,EACdA,EAAM,GAAKgC,EAAEE,OAAOJ,MACpB7B,EAASgC,MAGb,2BACEJ,KAAK,OACLC,MAAO9B,EAAM,GACb+B,SAAU,SAACC,GACT,IAAIC,EAAUjC,EACdA,EAAM,GAAKgC,EAAEE,OAAOJ,MACpB7B,EAASgC,MAGb,4BAAQJ,KAAK,UAAb,WAEF,4BAAQrC,QAASkC,GAAjB,WAIC,yBAAKtC,UAAU,aAjFD,WACnB,GAAIQ,EAKF,OAJ0BA,EAAUuC,QAClC,SAACrC,GAAD,OAAqC,IAAvBA,EAASsC,aAGAC,KAAI,SAACvC,GAAD,OAC3B,kBAAC,EAAD,CACE6B,IAAK7B,EAASmB,GACdjC,KAAMc,EACNb,YAAa,WACXc,EAAYD,SAsEawC,KCjGrCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1fa13cec.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Meme = ({ meme, handleClick, solo = false }) => {\r\n  let classname = solo ? \"meme solo-meme\" : \"meme\";\r\n\r\n  return (\r\n    <div className={classname}>\r\n      <img src={meme.url} alt=\"meme\" onClick={handleClick} />\r\n      <p>{meme.name}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Meme;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport Meme from \"./components/Meme\";\r\nimport \"./reset.css\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [templates, SetTemplates] = useState([]);\r\n  const [template, setTemplate] = useState(null);\r\n  const [texts, setTexts] = useState([]);\r\n  const [meme, setMeme] = useState(null);\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"https://api.imgflip.com/get_memes\", { crossDomain: true }).then(\r\n      (response) => {\r\n        SetTemplates(response.data.data.memes);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const templateView = () => {\r\n    if (templates) {\r\n      const filteredTemplates = templates.filter(\r\n        (template) => template.box_count === 2\r\n      );\r\n\r\n      return filteredTemplates.map((template) => (\r\n        <Meme\r\n          key={template.id}\r\n          meme={template}\r\n          handleClick={() => {\r\n            setTemplate(template);\r\n          }}\r\n        />\r\n      ));\r\n    }\r\n  };\r\n\r\n  const createView = () => {\r\n    return <Meme key={template.id} meme={template} solo=\"true\" />;\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let params = {\r\n      template_id: template.id,\r\n      username: process.env.REACT_APP_USERNAME,\r\n      password: process.env.REACT_APP_PASSWORD,\r\n      text0: texts[0],\r\n      text1: texts[1] || \"\",\r\n    };\r\n    const response = await Axios.post(\r\n      `https://api.imgflip.com/caption_image?template_id=${params.template_id}&username=${params.username}&password=${params.password}&text0=${params.text0}&text1=${params.text1}`\r\n    );\r\n    console.log(response);\r\n    setMeme(response.data.data.url);\r\n  };\r\n\r\n  const goBackHome = () => {\r\n    setTemplate(null);\r\n    setMeme(null);\r\n  };\r\n\r\n  if (meme) {\r\n    return (\r\n      <div>\r\n        <img src={meme} alt=\"meme\" />\r\n        <button onClick={goBackHome}>Make another meme</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (template) {\r\n    return (\r\n      <div className=\"container solo-container\">\r\n        {createView()}\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            value={texts[0]}\r\n            onChange={(e) => {\r\n              let newText = texts;\r\n              texts[0] = e.target.value;\r\n              setTexts(newText);\r\n            }}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={texts[1]}\r\n            onChange={(e) => {\r\n              let newText = texts;\r\n              texts[1] = e.target.value;\r\n              setTexts(newText);\r\n            }}\r\n          />\r\n          <button type=\"submit\">create</button>\r\n        </form>\r\n        <button onClick={goBackHome}>Cancel</button>\r\n      </div>\r\n    );\r\n  }\r\n  return <div className=\"container\">{templateView()}</div>;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}